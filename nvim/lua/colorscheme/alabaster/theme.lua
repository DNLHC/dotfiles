local blend = require('colorscheme.alabaster.util').blend

local M = {}

function M.get(config, p)
  local theme = {}
  local groups = config.groups or {}
  local styles = {
    italic = (config.disable_italics and p.none) or 'italic',
    split = (config.bold_split and groups.panel) or p.none,
    split_border = (config.bold_split and groups.panel) or groups.border,
    background = (config.disable_background and p.none) or groups.background,
    float_background = (config.disable_float_background and p.none) or p.bg3u,
  }
  styles.nc_background = (config.dim_nc_background and groups.panel)
    or styles.background

  theme = {
    ColorColumn = { bg = p.bg2u },
    Conceal = { bg = p.bg2u },
    TermNormal = { fg = 'NONE' },
    lualine_tabline_inactive = { fg = p.fg4d },

    CopilotAnnotation = { link = 'GhostText' },
    CopilotSuggestion = { link = 'GhostText' },
    GhostText = { fg = p.fg4d },
    -- Cursor = {},
    CursorColumn = { bg = p.bg1u },
    TermCursorNC = { fg = p.bg, bg = p.fg, ctermfg = '14', ctermbg = '15' },
    CursorLine = { bg = p.bg1u },
    CursorLineNr = { fg = p.fg },
    -- CursorLineSign = { bg = p.bg1u },
    CursorLineFold = { bg = p.bg1u },
    DarkenedPanel = { bg = groups.panel },
    -- DarkenedStatusline = { bg = groups.panel },
    DarkenedStatusline = { bg = groups.panel },
    DiffAdd = { bg = blend(p.diff.add, groups.background, 0.35) },
    DiffChange = { bg = blend(p.diff.change, groups.background, 0.35) },
    DiffDelete = {
      bg = blend(p.diff.remove, groups.background, 0.35),
    },
    DiffviewDiffDeleteHighlight = {
      bg = blend(p.diff.remove, groups.background, 0.8),
    },
    DiffviewDiffAddHighlight = {
      bg = blend(p.diff.add, groups.background, 0.8),
    },
    DiffText = { bg = blend(p.bg3u, groups.background, 0.8) },
    diffAdded = { link = 'DiffAdd' },
    diffChanged = { link = 'DiffChange' },
    diffRemoved = { link = 'DiffDelete' },
    DiffviewDiffDelete = {
      bg = blend(groups.panel, groups.background, 0.85),
      fg = blend(groups.panel, groups.background, 0.85),
    },
    Directory = { fg = p.fg, bg = p.none },
    EndOfBuffer = { fg = styles.background },
    ErrorMsg = { fg = groups.error },
    FloatBorder = { fg = groups.float_bg, bg = groups.float_bg },
    FloatTitle = { link = 'FloatBorder' },
    FoldColumn = { fg = p.fg3d },
    Folded = { fg = p.fg3d, bg = p.bg1u },
    Search = { bg = p.search },
    IncSearch = { link = 'Search' },
    CurSearch = { bg = p.cur_search },
    HighlightedyankRegion = { bg = p.yank },
    LineNr = { fg = p.fg5d },
    MatchParen = { bg = p.bg4u },
    ModeMsg = { fg = p.fg, bold = true },
    MoreMsg = { fg = p.fg2d },
    NonText = { fg = p.fg4d },
    Normal = { fg = p.fg, bg = styles.background },
    NormalFloat = { fg = p.fg, bg = groups.float_bg },
    NormalNC = { fg = p.fg, bg = styles.nc_background },
    NormalCmd = { fg = p.fg, bg = groups.float_bg },
    NvimInternalError = { fg = p.fg, bg = groups.error },
    Pmenu = { fg = p.fg2d, bg = p.bg2u },
    PmenuSbar = { bg = p.bg4u },
    PmenuSel = { fg = p.fg, bg = p.bg4u },
    PmenuThumb = { bg = p.fg4d },
    Question = { fg = p.fg },

    -- RedrawDebugClear = {},
    -- RedrawDebugComposed = {},
    -- RedrawDebugRecompose = {},
    SpecialKey = { fg = p.fg },
    SpellBad = { sp = groups.error, undercurl = true },
    SpellCap = { sp = p.fg3d, undercurl = true },
    SpellLocal = { sp = p.fg3d, undercurl = true },
    SpellRare = { sp = p.fg3d, undercurl = true },
    SignColumn = { fg = p.fg },
    StatusLine = { fg = p.fg3d, bg = groups.status_line },
    StatusLineNC = { fg = p.fg4d, bg = groups.status_line },
    StatusLineTerm = { link = 'StatusLine' },
    StatusLineTermNC = { link = 'StatusLineNC' },
    TabLine = { fg = p.fg3d, bg = p.bg2u },
    TabLineFill = { bg = p.bg2u },
    TabLineSel = { fg = p.fg, bg = p.bg },
    Title = { fg = p.fg },
    VertSplit = { fg = styles.split_border, bg = styles.split },
    WinSeparator = { link = 'VertSplit' },
    Visual = { bg = p.selection },
    WarningMsg = { fg = groups.warn },
    WildMenu = { link = 'IncSearch' },

    Boolean = { fg = p.purple },
    Character = { fg = p.fg },
    Comment = { fg = groups.comment, italic = true },
    Conditional = { fg = groups.keyword },
    Constant = { fg = p.fg },
    Debug = { fg = groups.error },
    Define = { fg = groups.keyword },
    Delimiter = { fg = groups.punctuation },
    Error = { fg = groups.error },
    Exception = { fg = groups.keyword },
    Float = { fg = p.purple },
    Function = { fg = p.blue },
    Identifier = { fg = p.fg },
    Include = { fg = groups.keyword },
    Keyword = { fg = groups.keyword },
    Label = { fg = p.fg },
    Macro = { fg = groups.keyword },
    Number = { fg = p.purple },
    Operator = { fg = p.fg },
    PreCondit = { fg = groups.keyword },
    PreProc = { fg = p.fg },
    Repeat = { fg = groups.keyword },
    Special = { fg = p.fg },
    SpecialChar = { fg = p.purple },
    SpecialComment = { fg = groups.comment },
    Statement = { fg = groups.keyword },
    StorageClass = { fg = groups.keyword },
    String = { fg = p.green },
    Structure = { fg = p.blue },
    Tag = { fg = p.blue },
    Todo = { fg = groups.keyword },
    Type = { fg = p.blue },
    Interface = { link = 'Type' },
    Typedef = { link = 'Keyword' },
    Underlined = { underline = true },

    htmlArg = { fg = groups.keyword },
    htmlBold = { bold = false },
    htmlEndTag = { fg = groups.punctuation },
    htmlLink = { fg = groups.link },
    htmlTag = { fg = groups.punctuation },
    htmlTagN = { fg = p.fg },
    htmlTagName = { fg = p.fg },

    markdownDelimiter = { link = 'Delimiter' },
    markdownLinkText = { fg = p.green, underline = true },
    markdownUrl = { link = 'markdownLinkText' },

    DiagnosticError = { fg = groups.error },
    DiagnosticHint = { fg = groups.hint },
    DiagnosticInfo = { fg = groups.info },
    DiagnosticWarn = { fg = groups.warn },
    DiagnosticDefaultError = { fg = groups.error },
    DiagnosticDefaultHint = { fg = groups.hint },
    DiagnosticDefaultInfo = { fg = groups.info },
    DiagnosticDefaultWarn = { fg = groups.warn },
    DiagnosticFloatingError = { fg = groups.error },
    DiagnosticFloatingHint = { fg = groups.hint },
    DiagnosticFloatingInfo = { fg = groups.info },
    DiagnosticFloatingWarn = { fg = groups.warn },
    DiagnosticSignError = { fg = groups.error },
    DiagnosticSignHint = { fg = groups.hint },
    DiagnosticSignInfo = { fg = groups.info },
    DiagnosticSignWarn = { fg = groups.warn },
    DiagnosticStatusLineError = { fg = groups.error, bg = groups.panel },
    DiagnosticStatusLineHint = { fg = groups.hint, bg = groups.panel },
    DiagnosticStatusLineInfo = { fg = groups.info, bg = groups.panel },
    DiagnosticStatusLineWarn = { fg = groups.warn, bg = groups.panel },
    DiagnosticUnderlineError = { sp = groups.error, undercurl = true },
    DiagnosticUnderlineHint = { sp = groups.hint, undercurl = true },
    DiagnosticUnderlineInfo = { sp = groups.info, undercurl = true },
    DiagnosticUnderlineWarn = { sp = groups.warn, undercurl = true },
    DiagnosticVirtualTextError = {
      fg = groups.error,
      bg = blend(groups.error, groups.background, 0.1),
    },
    DiagnosticVirtualTextHint = {
      fg = groups.hint,
      bg = blend(groups.hint, groups.background, 0.1),
    },
    DiagnosticVirtualTextInfo = {
      fg = groups.info,
      bg = blend(groups.info, groups.background, 0.1),
    },
    DiagnosticVirtualTextWarn = {
      fg = groups.warn,
      bg = blend(groups.warn, groups.background, 0.1),
    },
    DiagnosticUnnecessary = { fg = p.fg4d },

    DiffviewFilePanelRootPath = { fg = p.fg2d },
    DiffviewFilePanelTitle = { fg = p.fg3d, bold = false },
    DiffviewFilePanelCounter = { fg = p.fg1d, bold = false },
    DiffviewFilePanelFilePanelPath = { fg = p.fg4d, bold = false },
    DiffviewFilePanelPath = { fg = p.fg4d, bold = false },

    DefinitionCount = { fg = p.fg },
    DefinitionIcon = { fg = p.fg },
    DefintionPreviewTitle = { fg = p.fg, bold = true },
    LspFloatWinBorder = { bg = p.bg1d, fg = p.bg2u },
    LspFloatWinNormal = { bg = p.bg1d },
    LspDiagnosticsUnderlineError = { sp = groups.error, undercurl = true },
    LspDiagnosticsUnderlineWarning = { sp = groups.warn, undercurl = true },
    LspDiagnosticsUnderlineInformation = { sp = groups.info, undercurl = true },
    LspDiagnosticsUnderlineHint = { sp = groups.hint, undercurl = true },

    -- vim.lsp.buf.document_highlight()
    LspReferenceText = { bg = p.bg3u },
    LspReferenceRead = { bg = p.bg3u },
    LspReferenceWrite = { bg = p.bg3u },

    -- lsp-highlight-codelens
    LspCodeLens = { fg = p.fg3d }, -- virtual text of code lens
    LspCodeLensSeparator = { fg = p.fg3d }, -- separator between two or more code lens

    MiniJump = { link = 'Search' },

    -- lewis6991/gitsigns.nvim
    GitSignsAdd = { fg = p.diff.add },
    GitSignsChange = { fg = p.diff.change },
    GitSignsDelete = { fg = p.diff.remove },
    SignAdd = { link = 'GitSignsAdd' },
    SignChange = { link = 'GitSignsChange' },
    SignDelete = { link = 'GitSignsDelete' },

    BqfPreviewBorder = { fg = groups.border },
    BqfSign = { fg = p.red },
    qfPath = { fg = p.blue },

    -- kyazdani42/nvim-tree.lua
    NvimTreeEmptyFolderName = { fg = p.fg3d },
    NvimTreeFileDeleted = { fg = p.red },
    -- NvimTreeFileDirty = {},
    -- NvimTreeFileMerge = {},
    NvimTreeFileNew = { fg = p.green },
    -- NvimTreeFileRenamed = {},
    -- NvimTreeFileStaged = {},
    NvimTreeFolderIcon = { fg = p.fg3d },
    NvimTreeFolderName = { link = 'NvimTreeNormal' },
    NvimTreeGitDeleted = {
      fg = blend(groups.git_delete, groups.background, 0.6),
    },
    NvimTreeGitDirty = { fg = blend(groups.git_dirty, groups.background, 0.6) },
    NvimTreeGitIgnored = { fg = groups.git_ignore },
    NvimTreeGitMerge = { fg = groups.git_merge },
    NvimTreeGitNew = { fg = blend(groups.git_add, groups.background, 0.6) },
    NvimTreeGitRenamed = {
      fg = blend(groups.git_rename, groups.background, 0.6),
    },
    NvimTreeGitStaged = {
      fg = blend(groups.git_stage, groups.background, 0.6),
    },
    NvimTreeNormal = { fg = p.fg1d },
    NvimTreeImageFile = { link = 'NvimTreeNormal' },
    NvimTreeOpenedFile = { fg = p.fg, bg = p.highlight_med },
    NvimTreeOpenedFolderName = { link = 'NvimTreeFolderName' },
    NvimTreeRootFolder = { fg = p.fg2d },
    NvimTreeSpecialFile = { link = 'NvimTreeNormal' },
    NvimTreeWindowPicker = { fg = p.fg, bg = p.bg3u },
    NvimTreeIndentMarker = { fg = p.fg5d },

    -- luka-reineke/indent-blankline.nvim
    IndentBlanklineChar = { fg = p.bg2u },

    -- hrsh7th/nvim-cmp
    CmpItemAbbr = { fg = p.fg2d },
    CmpItemAbbrDeprecated = { fg = p.fg2d, strikethrough = true },
    CmpItemAbbrMatch = { fg = p.blue },
    CmpItemAbbrMatchFuzzy = { fg = p.fg },
    CmpItemKind = { fg = groups.keyword },
    CmpItemKindClass = { link = 'Type' },
    CmpItemKindFunction = { link = 'Function' },
    CmpItemKindInterface = { link = 'Type' },
    CmpItemKindMethod = { link = 'Function' },
    CmpItemKindSnippet = { link = 'String' },
    CmpItemKindVariable = { link = 'TSVariable' },
    CmpItemKindProperty = { link = 'TSProperty' },
    CmpItemKindText = { link = 'TSText' },

    -- nvim-telescope/telescope.nvim
    TelescopeBorder = { fg = groups.border, bg = p.bg },
    TelescopeMatching = { fg = p.blue },
    TelescopeNormal = { fg = p.fg3d, bg = p.bg },
    TelescopeResultsFilePath = { fg = p.fg4d },
    TelescopePromptNormal = { fg = p.fg, bg = p.bg },
    TelescopePromptBorder = { fg = groups.border, bg = p.bg },
    TelescopePromptPrefix = { fg = p.red },
    TelescopeSelection = { fg = p.fg, bg = p.bg1u },
    TelescopeSelectionCaret = { fg = p.fg, bg = p.bg2u },
    TelescopeTitle = { fg = p.fg3d, bg = p.bg },
    TelescopePreviewTitle = { bg = p.bg },
    TelescopeMultiSelection = { bg = p.search, fg = p.fg },

    GlanceListFilepath = { fg = p.fg4d },
    GlanceListCursorLine = { bg = p.bg4u },
    GlanceWinBarFilepath = { fg = p.fg4d, bg = p.bg3u },
    GlanceWinBarFilename = { fg = p.fg, bg = p.bg3u },
    GlanceWinBarTitle = { fg = p.fg, bg = p.bg3u },
    GlanceIndent = { fg = p.bg6u },
  }

  return theme
end

return M
